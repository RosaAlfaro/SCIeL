# Generated by Django 2.1.2 on 2018-11-02 21:36

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Actuador',
            fields=[
                ('id_actuador', models.AutoField(error_messages={'exist': 'El indentificador ya existe'}, help_text='Identificador genérico del actuador', primary_key=True, serialize=False, verbose_name='Codigo del Actuador')),
                ('nombre_actuador', models.CharField(blank=True, error_messages={'empty': 'Este campo no debe quedar vacío'}, help_text='Ingrese el nombre del actuador a usar', max_length=45, null=True, verbose_name='Nombre del Actuador')),
            ],
            options={
                'verbose_name': 'Actuador',
                'verbose_name_plural': 'Actuadores',
                'ordering': ['id_dispositivo', 'nombre_actuador'],
            },
        ),
        migrations.CreateModel(
            name='Cultivo',
            fields=[
                ('id_cultivo', models.AutoField(error_messages={'exist': 'El indentificador ya existe'}, help_text='Identificador genérico del cultivo', primary_key=True, serialize=False, verbose_name='Codigo del cultivo')),
                ('nombre_cultivo', models.CharField(blank=True, error_messages={'empty': 'Este campo no debe quedar vacío'}, help_text='Nombre de la planta a cultivar', max_length=45, null=True, verbose_name='Nombre del cultivo')),
                ('periodo_cosecha', models.IntegerField(blank=True, error_messages={'value': 'Debe ser un dato entero positivo'}, help_text='Debe ingresar el tiempo que tarda el cultivo en dar frutos', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000)], verbose_name='Periódo de Cosecha')),
            ],
            options={
                'verbose_name': 'Cultivo',
                'verbose_name_plural': 'Cultivos',
                'ordering': ['nombre_cultivo'],
            },
        ),
        migrations.CreateModel(
            name='Dispositivo',
            fields=[
                ('id_dispositivo', models.AutoField(error_messages={'exist': 'El indentificador ya existe'}, help_text='Identificador genérico del dispositivo', primary_key=True, serialize=False, verbose_name='Codigo del dispositivo')),
                ('nombre_dispositivo', models.CharField(blank=True, error_messages={'empty': 'Este campo no debe quedar vacío'}, help_text='Dele un nombre al dispositivo a usar en sus invernaderos', max_length=45, null=True, verbose_name='Nombre del dispositivo')),
            ],
            options={
                'verbose_name': 'Dispositivo',
                'verbose_name_plural': 'Dispositivos',
                'ordering': ['id_dispositivo'],
            },
        ),
        migrations.CreateModel(
            name='Etapa',
            fields=[
                ('id_etapa', models.AutoField(error_messages={'exist': 'El indentificador ya existe'}, help_text='Identificador genérico de la Etapa', primary_key=True, serialize=False, verbose_name='Codigo de la etapa')),
                ('numero_etapa', models.IntegerField(blank=True, error_messages={'value': 'Debe ser un dato entero positivo'}, help_text='Debe ingresar la cantidad de etapas durante el tiempo de vida del cultivo', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)], verbose_name='Número de etapa')),
                ('nombre_etapa', models.CharField(blank=True, error_messages={'empty': 'Este campo no debe quedar vacío'}, help_text='Ingrese el nombre de la etapa. Ejemplo: Floración', max_length=45, null=True, verbose_name='Nombre de etapa')),
                ('duracion', models.IntegerField(blank=True, error_messages={'value': 'Debe ser un dato entero positivo'}, help_text='Debe ingresar el tiempo que dura esta etapa', null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Duración de la etapa')),
                ('descripcion_etapa', models.CharField(blank=True, error_messages={'empty': 'Este campo no debe quedar vacío'}, help_text='Ingrese una breve descripción de la etapa', max_length=150, null=True, verbose_name='Descripcion de la etapa')),
                ('id_cultivo', models.ForeignKey(blank=True, error_messages={'select': 'Debe seleccionar uno de la lista'}, help_text='Cultivo al que pertenece esta etapa', null=True, on_delete=django.db.models.deletion.CASCADE, to='invernaderos.Cultivo', verbose_name='Cultivo')),
            ],
            options={
                'verbose_name': 'Etapa',
                'verbose_name_plural': 'Etapas',
                'ordering': ['id_cultivo', 'numero_etapa'],
            },
        ),
        migrations.CreateModel(
            name='Invernadero',
            fields=[
                ('id_invernadero', models.AutoField(error_messages={'exist': 'El indentificador ya existe'}, help_text='Identificador genérico del invernadero', primary_key=True, serialize=False, verbose_name='Codigo del invernadero')),
                ('nombre_invernadero', models.CharField(blank=True, error_messages={'empty': 'Este campo no debe quedar vacío'}, help_text='Asignele un nombre cualquiera al invernadero', max_length=45, null=True, verbose_name='Nombre del invernadero')),
                ('ubicacion', models.CharField(blank=True, error_messages={'empty': 'Este campo no debe quedar vacío'}, help_text='Ingrese la ubicación del invernadero', max_length=23, null=True, verbose_name='Ubicacion del invernadero')),
                ('id_cultivo', models.ManyToManyField(error_messages={'select': 'Debe seleccionar uno de la lista'}, help_text='Cultivo que se cosechará en este invernadero', null=True, to='invernaderos.Cultivo', verbose_name='Cultivo')),
                ('id_dispositivo', models.ForeignKey(blank=True, error_messages={'select': 'Debe seleccionar uno de la lista'}, help_text='Dispositivo que controla este invernadero', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='invernaderos.Dispositivo', verbose_name='Dispositivo')),
                ('id_usuario', models.ForeignKey(blank=True, error_messages={'select': 'Debe seleccionar uno de la lista'}, help_text='Usuario al que pertenece este invernadero', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL, verbose_name='Usuario')),
            ],
            options={
                'verbose_name': 'Invernadero',
                'verbose_name_plural': 'Invernaderos',
                'ordering': ['id_invernadero', 'nombre_invernadero'],
            },
        ),
        migrations.CreateModel(
            name='Medicion',
            fields=[
                ('id_medicion', models.AutoField(error_messages={'exist': 'El indentificador ya existe'}, help_text='Identificador genérico de la medición', primary_key=True, serialize=False, verbose_name='Codigo de la medición')),
                ('magnitud_medicion', models.DecimalField(blank=True, decimal_places=2, error_messages={'value': 'Debe ser un valor positivo'}, help_text='Magnitud de la medición realizada', max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Magnitud de la medición')),
                ('fecha_medicion', models.DateTimeField(auto_now=True, error_messages={'value': 'La fecha por defecto es la de hoy'}, help_text='Momento en el que se realizó la medición', null=True, verbose_name='Fecha de lectura')),
                ('is_activo', models.BooleanField(blank=True, default=False, error_messages={'value': 'Debe ser un atributo boleano'}, help_text='Respuesta del dispositivo', null=True, verbose_name='¿Está activo?')),
                ('id_actuador', models.ForeignKey(blank=True, error_messages={'select': 'Debe seleccionar uno de la lista'}, help_text='Actuador que responderá a dicha medición', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='invernaderos.Actuador', verbose_name='Actuador')),
                ('id_invernadero', models.ForeignKey(blank=True, error_messages={'select': 'Debe seleccionar uno de la lista'}, help_text='Invernadero al que se le realizó la medición', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='invernaderos.Invernadero', verbose_name='Invernadero')),
            ],
            options={
                'verbose_name': 'Medicion',
                'verbose_name_plural': 'Mediciones',
                'ordering': ['fecha_medicion', 'id_invernadero', 'id_sensor', 'id_parametro', 'id_actuador'],
            },
        ),
        migrations.CreateModel(
            name='Parametro',
            fields=[
                ('id_parametro', models.AutoField(error_messages={'exist': 'El indentificador ya existe'}, help_text='Identificador genérico del parámetro que servirá de estándar', primary_key=True, serialize=False, verbose_name='Codigo del parámetro')),
                ('nombre_parametro', models.CharField(blank=True, error_messages={'empty': 'Este campo no debe quedar vacío'}, help_text='Ingrese el nombre del parámetro a medir', max_length=45, null=True, verbose_name='Nombre del parámetro')),
                ('magnitud_referencia', models.DecimalField(blank=True, decimal_places=2, error_messages={'value': 'Ese valor debe ser positivo'}, help_text='Ingrese el valor de la magnitud de referencia para este parámetro', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Magnitud del Parámetro Base')),
                ('id_invernadero', models.ForeignKey(blank=True, error_messages={'select': 'Debe seleccionar uno de la lista'}, help_text='Invernadero al que se asignará este parámetro', null=True, on_delete=django.db.models.deletion.CASCADE, to='invernaderos.Invernadero', verbose_name='Invernadero')),
            ],
            options={
                'verbose_name': 'Parámetro',
                'verbose_name_plural': 'Parámetros',
                'ordering': ['id_invernadero', 'nombre_parametro'],
            },
        ),
        migrations.CreateModel(
            name='Sensor',
            fields=[
                ('id_sensor', models.AutoField(error_messages={'exist': 'El indentificador ya existe'}, help_text='Identificador genérico del sensor', primary_key=True, serialize=False, verbose_name='Codigo del sensor')),
                ('nombre_sensor', models.CharField(blank=True, error_messages={'empty': 'Este campo no debe quedar vacío'}, help_text='Ingrese un nombre para este sensor', max_length=45, null=True, verbose_name='Nombre del sensor')),
                ('id_dispositivo', models.ForeignKey(blank=True, error_messages={'select': 'Debe seleccionar uno de la lista'}, help_text='Dispositivo asociado a este sensor', null=True, on_delete=django.db.models.deletion.CASCADE, to='invernaderos.Dispositivo', verbose_name='Dispositivo')),
                ('id_invernadero', models.ForeignKey(blank=True, error_messages={'select': 'Debe seleccionar uno de la lista'}, help_text='Invernadero al que se asignará este parámetro', null=True, on_delete=django.db.models.deletion.CASCADE, to='invernaderos.Invernadero', verbose_name='Invernadero')),
            ],
            options={
                'verbose_name': 'Sensor',
                'verbose_name_plural': 'Sensores',
                'ordering': ['id_dispositivo', 'nombre_sensor'],
            },
        ),
        migrations.AddField(
            model_name='medicion',
            name='id_parametro',
            field=models.ForeignKey(blank=True, error_messages={'select': 'Debe seleccionar uno de la lista'}, help_text='Parámetro con el que se comparará esta medición', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='invernaderos.Parametro', verbose_name='Parámetro'),
        ),
        migrations.AddField(
            model_name='medicion',
            name='id_sensor',
            field=models.ForeignKey(blank=True, error_messages={'select': 'Debe seleccionar uno de la lista'}, help_text='Sensor con el que se realizó esta medición', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='invernaderos.Sensor', verbose_name='Sensor'),
        ),
        migrations.AddField(
            model_name='actuador',
            name='id_dispositivo',
            field=models.ForeignKey(blank=True, error_messages={'select': 'Debe seleccionar uno de la lista'}, help_text='Dispositivo que se asociará a este actuador', null=True, on_delete=django.db.models.deletion.CASCADE, to='invernaderos.Dispositivo', verbose_name='Dispositivo'),
        ),
        migrations.AddField(
            model_name='actuador',
            name='id_invernadero',
            field=models.ForeignKey(blank=True, error_messages={'select': 'Debe seleccionar uno de la lista'}, help_text='Invernadero al que se asignará este parámetro', null=True, on_delete=django.db.models.deletion.CASCADE, to='invernaderos.Invernadero', verbose_name='Invernadero'),
        ),
    ]
